#pragma once
#ifndef _CVS_H
#define _CVS_H
 
#include "chapeau_obj.h"

// collective variable structure
typedef struct cv {
  int typ;       // collective variable type
  int nC;        // count of atoms or atom-groups that contribute to this CV
  int * ind;     // indices in the atom/atom-group array generated by
                 // tclforces of the atoms that contribute to this CV
  double val;    // value of the CV
  double ** gr;  // cartesian gradients of this CV wrt contributing
                 // atom/atom-groups: gr[atom/atom-group][x|y|z]
   
  // Use to apply a force to the CV
  double f;
  double u;
  int amd;
  
  // boundaries
  double min;
  double max;
  double half_domain;
  double boundk;
  int (*boundFunc)(struct cv * self);

  // This array is used for some kind of cv like RMSD.
  // Most common CV types will lead ref as a null pointer in general.  A better
  // way for this scenario should be using derived types but C does not handle
  // very well inheritance and polymorphism. 
  double ** ref;
  double ** ref2;
  double refmod;

  FILE * ofp;
  int outputFreq;
  int boutput;
 
  //pointer to function that calculate the value of the cv
  int (*calc)(struct cv * self,  double ** R );
   
  // Chapeau objects used by the d2chap
  // TODO: Intente poner esto como una variable global
  // pero como que el swig no la mantiene viva y entre el
  // allocate y el uso se le pierde la direccion de memoria....
  // espero que esto no este generando otros problemas
  chapeau * d2ch;
  
} cv;
 
#endif
