#pragma once
#ifndef CVS_H
#define CVS_H

#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include "measurements.h"

// collective variable structure
typedef struct CVSTRUCT {
  int typ;       // collective variable type
  int nC;        // count of atoms or atom-groups that contribute to this CV
  int * ind;     // indices in the atom/atom-group array generated by
                 // tclforces of the atoms that contribute to this CV
  double val;    // value of the CV
  double ** gr;  // cartesian gradients of this CV wrt contributing
                 // atom/atom-groups: gr[atom/atom-group][x|y|z]
   
  // Use to apply a force to the CV
  double f;
  double u;
  
  // boundaries
  double min;
  double max;
  double half_domain;
  double boundk;
  int (*boundFunc)(struct CVSTRUCT * self);

  //pointer to function that calculate the value of the cv
  int (*calc)(struct CVSTRUCT * self,  double ** R );
                
} cvStruct;

// headers
int cv_getityp ( char * typ );
int cv_dimension ( cvStruct * c );
char * cv_getstyp ( int ityp );
cvStruct * New_cvStruct ( int typ, int nC, int * ind, 
    double zmin, double zmax,
    char * boundstr, double boundk);
 
int calccv_cogx  ( cvStruct * c, double ** R );
int calccv_cogy  ( cvStruct * c, double ** R );
int calccv_cogz  ( cvStruct * c, double ** R );
int calccv_x     ( cvStruct * c, double ** R );
int calccv_y     ( cvStruct * c, double ** R );
int calccv_z     ( cvStruct * c, double ** R );
int calccv_s     ( cvStruct * c, double ** R );
int calccv_bond  ( cvStruct * c, double ** R );
int calccv_dihed ( cvStruct * c, double ** R );
int calccv_angle ( cvStruct * c, double ** R );
int calccv_zsd_circle ( cvStruct * c, double ** R );
int calccv_zsd_xrange ( cvStruct * c, double ** R );
int calccv_zsd_ring ( cvStruct * c, double ** R );
int set_zsd_circle ( double x,double y, double xy, double s  ); 
int set_zsd_ring ( double x,double y, double r1, double r2, double s  ); 
double fcut(double r,double r1,double r2,double dfcut);
           
double cdf(double x);

// Boundaries Functions
int cv_SoftUpperWall ( cvStruct * c );
int cv_SoftLowerWall ( cvStruct * c );
int cv_SoftWalls ( cvStruct * c );
int cv_nada ( cvStruct * c );
         
#endif
