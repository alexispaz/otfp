!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	chapeau.h	/^  gsl_matrix * A, * Abar;$/;"	m	struct:CHAPEAU
ANGLE	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
ATOMCENTERSTRUCT	centers.h	/^typedef struct ATOMCENTERSTRUCT {$/;"	s
Abar	chapeau.h	/^  gsl_matrix * A, * Abar;$/;"	m	struct:CHAPEAU
ArrayToList	cfacv.tcl	/^proc ArrayToList {a n} {$/;"	p
BADCVSTRINGMESSAGE	cfacv.c	/^char * BADCVSTRINGMESSAGE = "NOT FOUND";$/;"	v
BOND	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
CARTESIAN_X	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
CARTESIAN_Y	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
CARTESIAN_Z	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
CENTERSTRUCT	centers.h	/^typedef struct CENTERSTRUCT { $/;"	s
CHAPEAU	chapeau.h	/^typedef struct CHAPEAU {$/;"	s
CHAPEAU_H	chapeau.h	2;"	d
CVSTRINGS	cfacv.c	/^char * CVSTRINGS[NULL_CV] = {"BOND", "ANGLE", "DIHED", "CARTESIAN_X", "CARTESIAN_Y", "CARTESIAN_Z"};$/;"	v
CVSTRUCT	cfacv.h	/^typedef struct CVSTRUCT {$/;"	s
Cfa_cvlibc_SafeInit	cfacv_wrap.c	/^SWIGEXPORT int Cfa_cvlibc_SafeInit(Tcl_Interp *interp) {$/;"	f
DATASPACESTRUCT	cfacv.h	/^typedef struct DATASPACESTRUCT {$/;"	s
DIHED	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
DataSpace	cfacv.h	/^} DataSpace;$/;"	t	typeref:struct:DATASPACESTRUCT
DataSpace_AddAtomCenter	cfacv.c	/^int DataSpace_AddAtomCenter ( DataSpace * ds, int n, int * ind, double * m ) {$/;"	f
DataSpace_AddCV	cfacv.c	/^int DataSpace_AddCV ( DataSpace * ds, char * typ, int nind, int * ind ) {$/;"	f
DataSpace_AddRestr	cfacv.c	/^int DataSpace_AddRestr ( DataSpace * ds, double k, double z, int nCV, double * cvc, char * rftypstr, $/;"	f
DataSpace_AddSmdOpt	cfacv.c	/^int DataSpace_AddSmdOpt  ( DataSpace * ds, int ir, double target, int t0, int t1 ) {$/;"	f
DataSpace_AddTamdOpt	cfacv.c	/^int DataSpace_AddTamdOpt ( DataSpace * ds, int ir, double g, double kt, double dt ) {$/;"	f
DataSpace_BinaryReportRestraints	cfacv.c	/^void DataSpace_BinaryReportRestraints ( DataSpace * ds, int step, int outputlevel, FILE * fp ) {$/;"	f
DataSpace_ComputeCVs	cfacv.c	/^int DataSpace_ComputeCVs ( DataSpace * ds ) {$/;"	f
DataSpace_InitKnots	cfacv.c	/^int DataSpace_InitKnots ( DataSpace * ds, char * filename ) {$/;"	f
DataSpace_ReportAll	cfacv.c	/^void DataSpace_ReportAll ( DataSpace * ds ) {$/;"	f
DataSpace_ReportCV	cfacv.c	/^void DataSpace_ReportCV ( DataSpace * ds, int * active, double * res ) {$/;"	f
DataSpace_ReportRestraints	cfacv.c	/^void DataSpace_ReportRestraints ( DataSpace * ds, int step, int outputlevel, FILE * fp ) {$/;"	f
DataSpace_RestrainingForces	cfacv.c	/^int DataSpace_RestrainingForces ( DataSpace * ds, int first, int timestep ) {$/;"	f
DataSpace_RestraintEnergy	cfacv.c	/^double DataSpace_RestraintEnergy ( DataSpace * ds ) {$/;"	f
DataSpace_SetRestraints	cfacv.c	/^int DataSpace_SetRestraints ( DataSpace * ds, double * rval ) {$/;"	f
DataSpace_SetupPairCalc	cfacv.c	/^int DataSpace_SetupPairCalc ( DataSpace * ds, double Ox, double Oy, double Oz, \\$/;"	f
DataSpace_centerPos	cfacv.c	/^double * DataSpace_centerPos ( DataSpace * ds, int i ) {$/;"	f
DataSpace_checkdata	cfacv.c	/^int DataSpace_checkdata ( DataSpace * ds ) {$/;"	f
DataSpace_dump	cfacv.c	/^int DataSpace_dump ( DataSpace * ds ) {$/;"	f
DataSpace_getN	cfacv.c	/^int DataSpace_getN ( DataSpace * ds ) {$/;"	f
DataSpace_pairmasks	cfacv.c	/^int * DataSpace_pairmasks ( DataSpace * ds ) {$/;"	f
F	cfacv.h	/^  double ** F; \/\/ temp storage of cartesian aux variable forces$/;"	m	struct:DATASPACESTRUCT
GCC_HASCLASSVISIBILITY	cfacv_wrap.c	82;"	d	file:
HARMONIC	cfacv.h	/^enum {HARMONIC, PERIODIC, NULL_RF};$/;"	e	enum:__anon4
K	cfacv.h	/^  int K; \/\/ number of restraints$/;"	m	struct:DATASPACESTRUCT
L	cfacv.h	/^  double L[3]; \/\/ simulation box size$/;"	m	struct:DATASPACESTRUCT
LJPair	cfacv.c	/^void LJPair ( double * par, double r2, double * gr ) {$/;"	f
LLONG_MAX	cfacv_wrap.c	1668;"	d	file:
LLONG_MIN	cfacv_wrap.c	1669;"	d	file:
ListToArray	cfacv.tcl	/^proc ListToArray {l} {$/;"	p
ListToArray_Data	cfacv.tcl	/^proc ListToArray_Data { a l } {$/;"	p
M	centers.h	/^  double M;$/;"	m	struct:ATOMCENTERSTRUCT
M	cfacv.h	/^  int M; \/\/ number of CVs$/;"	m	struct:DATASPACESTRUCT
MAXNBOR	cfacv.h	164;"	d
M_SQRT3	measurements.h	11;"	d
Max	cfacv.h	/^  double Min[3], Max[3];$/;"	m	struct:DATASPACESTRUCT
Min	cfacv.h	/^  double Min[3], Max[3];$/;"	m	struct:DATASPACESTRUCT
MyParanoiaCheck	cfacv.tcl	/^proc MyParanoiaCheck {ds msg} {$/;"	p
N	cfacv.h	/^  int N; \/\/ number of centers$/;"	m	struct:DATASPACESTRUCT
N	chapeau.h	/^  int N; \/\/ number of particles$/;"	m	struct:CHAPEAU
NULL_CV	cfacv.h	/^enum {BOND, ANGLE, DIHED, CARTESIAN_X, CARTESIAN_Y, CARTESIAN_Z, NULL_CV};$/;"	e	enum:__anon3
NULL_RF	cfacv.h	/^enum {HARMONIC, PERIODIC, NULL_RF};$/;"	e	enum:__anon4
NewDataSpace	cfacv.c	/^DataSpace * NewDataSpace ( int N, int M, int K, long int seed ) {$/;"	f
New_atomCenterStruct	centers.c	/^atomCenterStruct * New_atomCenterStruct ( int n ) {$/;"	f
New_centerStruct	centers.c	/^centerStruct * New_centerStruct ( int id, int maxN ) {$/;"	f
New_cvStruct	cfacv.c	/^cvStruct * New_cvStruct ( int typ, int nC, int * ind ) {$/;"	f
New_restrStruct	cfacv.c	/^restrStruct * New_restrStruct ( double k, double z, int nCV, double * cvc, char * rftypstr, double zmin, double zmax ) {$/;"	f
New_smdOptStruct	cfacv.c	/^smdOptStruct * New_smdOptStruct ( double target, int t0, int t1, int periodic ) {$/;"	f
New_tamdOptStruct	cfacv.c	/^tamdOptStruct * New_tamdOptStruct ( double g, double kt, double dt, int riftyp, double half_domain ) {$/;"	f
Null_centerStruct	centers.c	/^centerStruct * Null_centerStruct ( void ) {$/;"	f
O	cfacv.h	/^  double O[3]; \/\/ simulation box origin$/;"	m	struct:DATASPACESTRUCT
PERIODIC	cfacv.h	/^enum {HARMONIC, PERIODIC, NULL_RF};$/;"	e	enum:__anon4
Permutation	chapeau.h	/^  gsl_permutation * Permutation;$/;"	m	struct:CHAPEAU
R	cfacv.h	/^  double ** R; \/\/ array of center cartesian coordinates R[i][0\/1\/2]$/;"	m	struct:DATASPACESTRUCT
RESTRSTRUCT	cfacv.h	/^typedef struct RESTRSTRUCT {$/;"	s
RFSTRINGS	cfacv.c	/^char * RFSTRINGS[NULL_RF] = {"HARMONIC", "PERIODIC"};$/;"	v
RR	cfacv.h	/^  double *** RR; \/\/ array of intercenter distances components$/;"	m	struct:DATASPACESTRUCT
SIN_THRESH	measurements.c	177;"	d	file:
SMDOPTSTRUCT	cfacv.h	/^typedef struct SMDOPTSTRUCT {$/;"	s
SWIGEXPORT	cfacv_wrap.c	89;"	d	file:
SWIGEXPORT	cfacv_wrap.c	91;"	d	file:
SWIGEXPORT	cfacv_wrap.c	95;"	d	file:
SWIGEXPORT	cfacv_wrap.c	97;"	d	file:
SWIGINLINE	cfacv_wrap.c	34;"	d	file:
SWIGINLINE	cfacv_wrap.c	36;"	d	file:
SWIGINTERN	cfacv_wrap.c	71;"	d	file:
SWIGINTERNINLINE	cfacv_wrap.c	76;"	d	file:
SWIGRUNTIME	cfacv_wrap.c	160;"	d	file:
SWIGRUNTIMEINLINE	cfacv_wrap.c	164;"	d	file:
SWIGSTDCALL	cfacv_wrap.c	105;"	d	file:
SWIGSTDCALL	cfacv_wrap.c	107;"	d	file:
SWIGTCL	cfacv_wrap.c	11;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	cfacv_wrap.c	21;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	cfacv_wrap.c	25;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	cfacv_wrap.c	27;"	d	file:
SWIGTYPE_p_DataSpace	cfacv_wrap.c	1602;"	d	file:
SWIGTYPE_p_FILE	cfacv_wrap.c	1603;"	d	file:
SWIGTYPE_p_char	cfacv_wrap.c	1604;"	d	file:
SWIGTYPE_p_double	cfacv_wrap.c	1605;"	d	file:
SWIGTYPE_p_int	cfacv_wrap.c	1606;"	d	file:
SWIGUNUSED	cfacv_wrap.c	44;"	d	file:
SWIGUNUSED	cfacv_wrap.c	46;"	d	file:
SWIGUNUSED	cfacv_wrap.c	49;"	d	file:
SWIGUNUSED	cfacv_wrap.c	51;"	d	file:
SWIGUNUSEDPARM	cfacv_wrap.c	63;"	d	file:
SWIGUNUSEDPARM	cfacv_wrap.c	65;"	d	file:
SWIGVERSION	cfacv_wrap.c	1619;"	d	file:
SWIG_Acquire	cfacv_wrap.c	951;"	d	file:
SWIG_AddCast	cfacv_wrap.c	/^SWIGINTERNINLINE int SWIG_AddCast(int r) { $/;"	f
SWIG_AddCast	cfacv_wrap.c	300;"	d	file:
SWIG_AddNewMask	cfacv_wrap.c	276;"	d	file:
SWIG_AddTmpMask	cfacv_wrap.c	279;"	d	file:
SWIG_ArgError	cfacv_wrap.c	262;"	d	file:
SWIG_AsCharPtrAndSize	cfacv_wrap.c	/^SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)$/;"	f
SWIG_AttributeError	cfacv_wrap.c	714;"	d	file:
SWIG_BADOBJ	cfacv_wrap.c	271;"	d	file:
SWIG_BUFFER_SIZE	cfacv_wrap.c	169;"	d	file:
SWIG_CASTRANKLIMIT	cfacv_wrap.c	265;"	d	file:
SWIG_CASTRANKMASK	cfacv_wrap.c	291;"	d	file:
SWIG_CAST_NEW_MEMORY	cfacv_wrap.c	174;"	d	file:
SWIG_CastRank	cfacv_wrap.c	292;"	d	file:
SWIG_CheckState	cfacv_wrap.c	/^SWIGINTERNINLINE int SWIG_CheckState(int r) { $/;"	f
SWIG_CheckState	cfacv_wrap.c	301;"	d	file:
SWIG_ConvertFunctionPtr	cfacv_wrap.c	928;"	d	file:
SWIG_ConvertInstance	cfacv_wrap.c	924;"	d	file:
SWIG_ConvertMember	cfacv_wrap.c	932;"	d	file:
SWIG_ConvertPacked	cfacv_wrap.c	920;"	d	file:
SWIG_ConvertPtr	cfacv_wrap.c	916;"	d	file:
SWIG_ConvertPtrFromString	cfacv_wrap.c	954;"	d	file:
SWIG_DelNewMask	cfacv_wrap.c	277;"	d	file:
SWIG_DelTmpMask	cfacv_wrap.c	280;"	d	file:
SWIG_Disown	cfacv_wrap.c	953;"	d	file:
SWIG_DivisionByZero	cfacv_wrap.c	709;"	d	file:
SWIG_ERROR	cfacv_wrap.c	260;"	d	file:
SWIG_EXPAND_AND_QUOTE_STRING	cfacv_wrap.c	144;"	d	file:
SWIG_Error	cfacv_wrap.c	945;"	d	file:
SWIG_ErrorType	cfacv_wrap.c	944;"	d	file:
SWIG_From_double	cfacv_wrap.c	1724;"	d	file:
SWIG_From_int	cfacv_wrap.c	/^SWIG_From_int  (int value)$/;"	f
SWIG_From_long	cfacv_wrap.c	/^SWIG_From_long  (long value)$/;"	f
SWIG_GetArgs	cfacv_wrap.c	957;"	d	file:
SWIG_GetConstant	cfacv_wrap.c	972;"	d	file:
SWIG_GetConstantObj	cfacv_wrap.c	958;"	d	file:
SWIG_GetModule	cfacv_wrap.c	938;"	d	file:
SWIG_IOError	cfacv_wrap.c	705;"	d	file:
SWIG_IndexError	cfacv_wrap.c	707;"	d	file:
SWIG_InitializeModule	cfacv_wrap.c	/^SWIG_InitializeModule(void *clientdata) {$/;"	f
SWIG_IsNewObj	cfacv_wrap.c	278;"	d	file:
SWIG_IsOK	cfacv_wrap.c	261;"	d	file:
SWIG_IsTmpObj	cfacv_wrap.c	281;"	d	file:
SWIG_MAXCASTRANK	cfacv_wrap.c	289;"	d	file:
SWIG_MakePtr	cfacv_wrap.c	955;"	d	file:
SWIG_MangledTypeQuery	cfacv_wrap.c	1610;"	d	file:
SWIG_MangledTypeQueryModule	cfacv_wrap.c	/^SWIG_MangledTypeQueryModule(swig_module_info *start, $/;"	f
SWIG_MemoryError	cfacv_wrap.c	715;"	d	file:
SWIG_MethodCommand	cfacv_wrap.c	952;"	d	file:
SWIG_NEWOBJ	cfacv_wrap.c	273;"	d	file:
SWIG_NEWOBJMASK	cfacv_wrap.c	267;"	d	file:
SWIG_NewFunctionPtrObj	cfacv_wrap.c	929;"	d	file:
SWIG_NewInstanceObj	cfacv_wrap.c	925;"	d	file:
SWIG_NewMemberObj	cfacv_wrap.c	933;"	d	file:
SWIG_NewPackedObj	cfacv_wrap.c	921;"	d	file:
SWIG_NewPointerObj	cfacv_wrap.c	917;"	d	file:
SWIG_NullReferenceError	cfacv_wrap.c	716;"	d	file:
SWIG_OK	cfacv_wrap.c	259;"	d	file:
SWIG_OLDOBJ	cfacv_wrap.c	272;"	d	file:
SWIG_ObjectConstructor	cfacv_wrap.c	959;"	d	file:
SWIG_ObjectDelete	cfacv_wrap.c	961;"	d	file:
SWIG_OverflowError	cfacv_wrap.c	710;"	d	file:
SWIG_POINTER_DISOWN	cfacv_wrap.c	173;"	d	file:
SWIG_POINTER_EXCEPTION	cfacv_wrap.c	971;"	d	file:
SWIG_POINTER_OWN	cfacv_wrap.c	177;"	d	file:
SWIG_PackData	cfacv_wrap.c	/^SWIG_PackData(char *c, void *ptr, size_t sz) {$/;"	f
SWIG_PackDataName	cfacv_wrap.c	/^SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {$/;"	f
SWIG_PackVoidPtr	cfacv_wrap.c	/^SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {$/;"	f
SWIG_PointerTypeFromString	cfacv_wrap.c	956;"	d	file:
SWIG_PropagateClientData	cfacv_wrap.c	/^SWIG_PropagateClientData(void) {$/;"	f
SWIG_QUOTE_STRING	cfacv_wrap.c	143;"	d	file:
SWIG_RUNTIME_VERSION	cfacv_wrap.c	139;"	d	file:
SWIG_RuntimeError	cfacv_wrap.c	706;"	d	file:
SWIG_SetModule	cfacv_wrap.c	939;"	d	file:
SWIG_SyntaxError	cfacv_wrap.c	711;"	d	file:
SWIG_SystemError	cfacv_wrap.c	713;"	d	file:
SWIG_TCL_BINARY	cfacv_wrap.c	810;"	d	file:
SWIG_TCL_CALL_ARGS_2	cfacv_wrap.c	965;"	d	file:
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	/^SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {$/;"	f
SWIG_TCL_DECL_ARGS_2	cfacv_wrap.c	964;"	d	file:
SWIG_TCL_POINTER	cfacv_wrap.c	809;"	d	file:
SWIG_TCL_STUBS_VERSION	cfacv_wrap.c	1644;"	d	file:
SWIG_TMPOBJ	cfacv_wrap.c	274;"	d	file:
SWIG_TMPOBJMASK	cfacv_wrap.c	269;"	d	file:
SWIG_TYPE_TABLE_NAME	cfacv_wrap.c	145;"	d	file:
SWIG_TYPE_TABLE_NAME	cfacv_wrap.c	147;"	d	file:
SWIG_Tcl_Acquire	cfacv_wrap.c	/^SWIG_Tcl_Acquire(void *ptr) {$/;"	f
SWIG_Tcl_AddErrorMsg	cfacv_wrap.c	/^SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)$/;"	f
SWIG_Tcl_ConvertPtr	cfacv_wrap.c	/^SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {$/;"	f
SWIG_Tcl_ConvertPtrFromString	cfacv_wrap.c	/^SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {$/;"	f
SWIG_Tcl_Disown	cfacv_wrap.c	/^SWIG_Tcl_Disown(void *ptr) {$/;"	f
SWIG_Tcl_ErrorType	cfacv_wrap.c	/^SWIG_Tcl_ErrorType(int code) {$/;"	f
SWIG_Tcl_GetArgs	cfacv_wrap.c	/^SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {$/;"	f
SWIG_Tcl_GetConstant	cfacv_wrap.c	973;"	d	file:
SWIG_Tcl_GetConstantObj	cfacv_wrap.c	/^SWIG_Tcl_GetConstantObj(const char *key) {$/;"	f
SWIG_Tcl_GetModule	cfacv_wrap.c	/^SWIG_Tcl_GetModule(Tcl_Interp *interp) {$/;"	f
SWIG_Tcl_InstallConstants	cfacv_wrap.c	/^  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {$/;"	f
SWIG_Tcl_InstallMethodLookupTables	cfacv_wrap.c	/^  SWIG_Tcl_InstallMethodLookupTables(void) {$/;"	f
SWIG_Tcl_MakePtr	cfacv_wrap.c	/^SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {$/;"	f
SWIG_Tcl_MethodCommand	cfacv_wrap.c	/^SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {$/;"	f
SWIG_Tcl_NewInstanceObj	cfacv_wrap.c	/^SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {$/;"	f
SWIG_Tcl_NewPackedObj	cfacv_wrap.c	/^SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {$/;"	f
SWIG_Tcl_NewPointerObj	cfacv_wrap.c	/^SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {$/;"	f
SWIG_Tcl_ObjectConstructor	cfacv_wrap.c	/^SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
SWIG_Tcl_ObjectDelete	cfacv_wrap.c	/^SWIG_Tcl_ObjectDelete(ClientData clientData) {$/;"	f
SWIG_Tcl_ObjectTable	cfacv_wrap.c	/^SWIG_Tcl_ObjectTable(void) {$/;"	f
SWIG_Tcl_PointerTypeFromString	cfacv_wrap.c	/^SWIG_Tcl_PointerTypeFromString(char *c) {$/;"	f
SWIG_Tcl_SetConstantObj	cfacv_wrap.c	/^SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {$/;"	f
SWIG_Tcl_SetErrorMsg	cfacv_wrap.c	/^SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)$/;"	f
SWIG_Tcl_SetErrorObj	cfacv_wrap.c	/^SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)$/;"	f
SWIG_Tcl_SetModule	cfacv_wrap.c	/^SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {$/;"	f
SWIG_Tcl_Thisown	cfacv_wrap.c	/^SWIG_Tcl_Thisown(void *ptr) {$/;"	f
SWIG_Thisown	cfacv_wrap.c	960;"	d	file:
SWIG_TypeCast	cfacv_wrap.c	/^SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {$/;"	f
SWIG_TypeCheck	cfacv_wrap.c	/^SWIG_TypeCheck(const char *c, swig_type_info *ty) {$/;"	f
SWIG_TypeCheckStruct	cfacv_wrap.c	/^SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {$/;"	f
SWIG_TypeClientData	cfacv_wrap.c	/^SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {$/;"	f
SWIG_TypeCmp	cfacv_wrap.c	/^SWIG_TypeCmp(const char *nb, const char *tb) {$/;"	f
SWIG_TypeDynamicCast	cfacv_wrap.c	/^SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {$/;"	f
SWIG_TypeEquiv	cfacv_wrap.c	/^SWIG_TypeEquiv(const char *nb, const char *tb) {$/;"	f
SWIG_TypeError	cfacv_wrap.c	708;"	d	file:
SWIG_TypeName	cfacv_wrap.c	/^SWIG_TypeName(const swig_type_info *ty) {$/;"	f
SWIG_TypeNameComp	cfacv_wrap.c	/^SWIG_TypeNameComp(const char *f1, const char *l1,$/;"	f
SWIG_TypeNewClientData	cfacv_wrap.c	/^SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {$/;"	f
SWIG_TypePrettyName	cfacv_wrap.c	/^SWIG_TypePrettyName(const swig_type_info *type) {$/;"	f
SWIG_TypeQuery	cfacv_wrap.c	1609;"	d	file:
SWIG_TypeQueryModule	cfacv_wrap.c	/^SWIG_TypeQueryModule(swig_module_info *start, $/;"	f
SWIG_TypeRank	cfacv_wrap.c	286;"	d	file:
SWIG_UnknownError	cfacv_wrap.c	704;"	d	file:
SWIG_UnpackData	cfacv_wrap.c	/^SWIG_UnpackData(const char *c, void *ptr, size_t sz) {$/;"	f
SWIG_UnpackDataName	cfacv_wrap.c	/^SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {$/;"	f
SWIG_UnpackVoidPtr	cfacv_wrap.c	/^SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {$/;"	f
SWIG_VERSION	cfacv_wrap.c	1620;"	d	file:
SWIG_ValueError	cfacv_wrap.c	712;"	d	file:
SWIG_as_voidptr	cfacv_wrap.c	1623;"	d	file:
SWIG_as_voidptrptr	cfacv_wrap.c	1624;"	d	file:
SWIG_contract_assert	cfacv_wrap.c	1596;"	d	file:
SWIG_exception_fail	cfacv_wrap.c	1594;"	d	file:
SWIG_fail	cfacv_wrap.c	946;"	d	file:
SWIG_init	cfacv_wrap.c	/^SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {$/;"	f
SWIG_init	cfacv_wrap.c	1614;"	d	file:
SWIG_name	cfacv_wrap.c	1615;"	d	file:
SWIG_prefix	cfacv_wrap.c	1616;"	d	file:
SWIG_version	cfacv_wrap.c	1617;"	d	file:
TAMDOPTSTRUCT	cfacv.h	/^typedef struct TAMDOPTSTRUCT {$/;"	s
Tcl_DataSpace_InitKnots	cfacv.tcl	/^proc Tcl_DataSpace_InitKnots { ds filename } {$/;"	p
Tcl_InitializePairCalc	cfacv.tcl	/^proc Tcl_InitializePairCalc { ds XSCFILE cutoff nlcutoff begin_evolve usetamdforces reportparamfreq spline_min nKnots splineoutputfile splineoutputfreq splineoutputlevel updateinterval } {$/;"	p
Tcl_NewDataSpace	cfacv.tcl	/^proc Tcl_NewDataSpace { nC cvL rL seed } {$/;"	p
Tcl_ObserveDataSpace	cfacv.tcl	/^proc Tcl_ObserveDataSpace { ds cntrSel frame } {$/;"	p
Tcl_Reinitialize	cfacv.tcl	/^proc Tcl_Reinitialize { ds restartINP } {$/;"	p
Tcl_UpdateDataSpace	cfacv.tcl	/^proc Tcl_UpdateDataSpace { ds lC groups first timestep } {$/;"	p
ULLONG_MAX	cfacv_wrap.c	1670;"	d	file:
Xi	cfacv.h	/^  unsigned short * Xi;$/;"	m	struct:DATASPACESTRUCT
Z	cfacv.h	/^  double ** Z; \/\/ temp storage of cartesian aux variables$/;"	m	struct:DATASPACESTRUCT
_CENTERS_H_	centers.h	2;"	d
_CFACV_H_	cfacv.h	68;"	d
_CRT_SECURE_NO_DEPRECATE	cfacv_wrap.c	113;"	d	file:
_MEASUREMENTS_H_	measurements.h	2;"	d
_SCL_SECURE_NO_DEPRECATE	cfacv_wrap.c	118;"	d	file:
_swigc__p_DataSpace	cfacv_wrap.c	/^static swig_cast_info _swigc__p_DataSpace[] = {  {&_swigt__p_DataSpace, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigc__p_FILE	cfacv_wrap.c	/^static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigc__p_char	cfacv_wrap.c	/^static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigc__p_double	cfacv_wrap.c	/^static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigc__p_int	cfacv_wrap.c	/^static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigt__p_DataSpace	cfacv_wrap.c	/^static swig_type_info _swigt__p_DataSpace = {"_p_DataSpace", "DataSpace *", 0, 0, (void*)0, 0};$/;"	v	file:
_swigt__p_FILE	cfacv_wrap.c	/^static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};$/;"	v	file:
_swigt__p_char	cfacv_wrap.c	/^static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};$/;"	v	file:
_swigt__p_double	cfacv_wrap.c	/^static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};$/;"	v	file:
_swigt__p_int	cfacv_wrap.c	/^static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};$/;"	v	file:
_wrap_DataSpace_AddAtomCenter	cfacv_wrap.c	/^_wrap_DataSpace_AddAtomCenter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_AddCV	cfacv_wrap.c	/^_wrap_DataSpace_AddCV(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_AddRestr	cfacv_wrap.c	/^_wrap_DataSpace_AddRestr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_AddSmdOpt	cfacv_wrap.c	/^_wrap_DataSpace_AddSmdOpt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_AddTamdOpt	cfacv_wrap.c	/^_wrap_DataSpace_AddTamdOpt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_BinaryReportRestraints	cfacv_wrap.c	/^_wrap_DataSpace_BinaryReportRestraints(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_ComputeCVs	cfacv_wrap.c	/^_wrap_DataSpace_ComputeCVs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_InitKnots	cfacv_wrap.c	/^_wrap_DataSpace_InitKnots(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_ReportAll	cfacv_wrap.c	/^_wrap_DataSpace_ReportAll(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_ReportCV	cfacv_wrap.c	/^_wrap_DataSpace_ReportCV(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_ReportRestraints	cfacv_wrap.c	/^_wrap_DataSpace_ReportRestraints(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_RestrainingForces	cfacv_wrap.c	/^_wrap_DataSpace_RestrainingForces(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_RestraintEnergy	cfacv_wrap.c	/^_wrap_DataSpace_RestraintEnergy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_SetRestraints	cfacv_wrap.c	/^_wrap_DataSpace_SetRestraints(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_SetupPairCalc	cfacv_wrap.c	/^_wrap_DataSpace_SetupPairCalc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_centerPos	cfacv_wrap.c	/^_wrap_DataSpace_centerPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_checkdata	cfacv_wrap.c	/^_wrap_DataSpace_checkdata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_dump	cfacv_wrap.c	/^_wrap_DataSpace_dump(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_getN	cfacv_wrap.c	/^_wrap_DataSpace_getN(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_DataSpace_pairmasks	cfacv_wrap.c	/^_wrap_DataSpace_pairmasks(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_NewDataSpace	cfacv_wrap.c	/^_wrap_NewDataSpace(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_array_getitem	cfacv_wrap.c	/^_wrap_array_getitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_array_setitem	cfacv_wrap.c	/^_wrap_array_setitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_arrayint_getitem	cfacv_wrap.c	/^_wrap_arrayint_getitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_arrayint_setitem	cfacv_wrap.c	/^_wrap_arrayint_setitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_cfacvBanner	cfacv_wrap.c	/^_wrap_cfacvBanner(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_delete_array	cfacv_wrap.c	/^_wrap_delete_array(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_delete_arrayint	cfacv_wrap.c	/^_wrap_delete_arrayint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_get_double	cfacv_wrap.c	/^_wrap_get_double(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_my_binfopen	cfacv_wrap.c	/^_wrap_my_binfopen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_my_fopen	cfacv_wrap.c	/^_wrap_my_fopen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_new_array	cfacv_wrap.c	/^_wrap_new_array(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
_wrap_new_arrayint	cfacv_wrap.c	/^_wrap_new_arrayint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {$/;"	f
ac	cfacv.h	/^  atomCenterStruct ** ac; \/\/ defined in centers.h$/;"	m	struct:DATASPACESTRUCT
accumZ	cfacv.h	/^  double ** accumZ;$/;"	m	struct:DATASPACESTRUCT
addr	cfacv_wrap.c	/^  void *addr;$/;"	m	struct:__anon2	file:
alpha	chapeau.h	/^  double alpha;$/;"	m	struct:CHAPEAU
array_getitem	cfacv_wrap.c	/^  static double array_getitem(double *ary, size_t index) {$/;"	f	file:
array_setitem	cfacv_wrap.c	/^  static void array_setitem(double *ary, size_t index, double value) {$/;"	f	file:
arrayint_getitem	cfacv_wrap.c	/^  static int arrayint_getitem(int *ary, size_t index) {$/;"	f	file:
arrayint_setitem	cfacv_wrap.c	/^  static void arrayint_setitem(int *ary, size_t index, int value) {$/;"	f	file:
assign_center_betas	cfacv.tcl	/^proc assign_center_betas { p includeH } {$/;"	p
atomCenterStruct	centers.h	/^} atomCenterStruct;$/;"	t	typeref:struct:ATOMCENTERSTRUCT
attributes	cfacv_wrap.c	/^  swig_attribute     *attributes;$/;"	m	struct:swig_class	file:
b	chapeau.h	/^  gsl_vector * b, * bbar;$/;"	m	struct:CHAPEAU
base_names	cfacv_wrap.c	/^  const char              **base_names;$/;"	m	struct:swig_class	file:
bases	cfacv_wrap.c	/^  struct swig_class **bases;$/;"	m	struct:swig_class	typeref:struct:swig_class::swig_class	file:
bbar	chapeau.h	/^  gsl_vector * b, * bbar;$/;"	m	struct:CHAPEAU
beginEvolveParameters	cfacv.h	/^  int beginEvolveParameters;$/;"	m	struct:DATASPACESTRUCT
bin_sort	centers.c	/^int bin_sort ( int * bin, double * x, double * y, double * z, int nAtoms, int nCenters, int nCycles, $/;"	f
calcforces	cfacv_tclforces.tcl	/^proc calcforces { } {$/;"	p
cast	cfacv_wrap.c	/^  struct swig_cast_info  *cast;			\/* linked list of types that can cast into this type *\/$/;"	m	struct:swig_type_info	typeref:struct:swig_type_info::swig_cast_info	file:
cast_initial	cfacv_wrap.c	/^  swig_cast_info         **cast_initial;	\/* Array of initially generated casting structures *\/$/;"	m	struct:swig_module_info	file:
centerStruct	centers.h	/^} centerStruct;$/;"	t	typeref:struct:CENTERSTRUCT
centerStruct_SwapMembers	centers.c	/^void centerStruct_SwapMembers ( centerStruct * c, centerStruct * d, int i, int j ) {$/;"	f
centerStruct_addMember	centers.c	/^void centerStruct_addMember ( centerStruct * c, int i ) {$/;"	f
centerStruct_binnify	centers.c	/^void centerStruct_binnify ( centerStruct * c, int * bin, int * id, double * rg ) {$/;"	f
centerStruct_randomSwapMember	centers.c	/^void centerStruct_randomSwapMember (centerStruct * c, centerStruct * d, int * i, int * j ) {$/;"	f
centerStruct_rg	centers.c	/^void centerStruct_rg ( centerStruct * c, double * x, double * y, double * z ) {$/;"	f
centerStruct_split	centers.c	/^void centerStruct_split ( centerStruct * c, double * x, double * y, double * z, int nAtom ) {$/;"	f
center_selections	cfacv.tcl	/^proc center_selections { molID serArray } {$/;"	p
cfacvBanner	cfacv.c	/^void cfacvBanner ( void ) {$/;"	f
cfacv_banner	cfacv.tcl	/^proc cfacv_banner { argv } {$/;"	p
ch	cfacv.h	/^  chapeau * ch;$/;"	m	struct:DATASPACESTRUCT
chapeau	chapeau.h	/^} chapeau;$/;"	t	typeref:struct:CHAPEAU
chapeau_alloc	chapeau.c	/^chapeau * chapeau_alloc ( int m, double rmin, double rmax, int npart ) {$/;"	f
chapeau_increment_global_accumulators	chapeau.c	/^void chapeau_increment_global_accumulators ( chapeau * ch, int i, double * F ) {$/;"	f
chapeau_increment_particle_sum	chapeau.c	/^void chapeau_increment_particle_sum ( chapeau * ch, int i, int j, double * Zij, double zij ) {$/;"	f
chapeau_init_particle_sums	chapeau.c	/^void chapeau_init_particle_sums ( chapeau * ch ) {$/;"	f
chapeau_output	chapeau.c	/^void chapeau_output ( chapeau * ch, int timestep ) {$/;"	f
chapeau_pair_eval_g	chapeau.c	/^void chapeau_pair_eval_g ( chapeau * ch, double z, double * u, double * g_r ) {$/;"	f
chapeau_setPeaks	chapeau.c	/^void chapeau_setPeaks ( chapeau * ch, double * peaks ) {$/;"	f
chapeau_setupoutput	chapeau.c	/^void chapeau_setupoutput ( chapeau * ch, char * filename, int outputFreq, int outputLevel ) {$/;"	f
chapeau_update_peaks	chapeau.c	/^void chapeau_update_peaks ( chapeau * ch, int nsamples, int timestep ) {$/;"	f
classptr	cfacv_wrap.c	/^  swig_class   *classptr;$/;"	m	struct:swig_instance	file:
clientdata	cfacv_wrap.c	/^  ClientData  clientdata;$/;"	m	struct:__anon1	file:
clientdata	cfacv_wrap.c	/^  void                    *clientdata;		\/* Language specific module data *\/$/;"	m	struct:swig_module_info	file:
clientdata	cfacv_wrap.c	/^  void                   *clientdata;		\/* language specific type data *\/$/;"	m	struct:swig_type_info	file:
cm	centers.h	/^  double cm[3];$/;"	m	struct:CENTERSTRUCT
cmdtok	cfacv_wrap.c	/^  Tcl_Command    cmdtok;$/;"	m	struct:swig_instance	file:
constructor	cfacv_wrap.c	/^  swig_wrapper       constructor;$/;"	m	struct:swig_class	file:
converter	cfacv_wrap.c	/^  swig_converter_func     converter;		\/* function to cast the void pointers *\/$/;"	m	struct:swig_cast_info	file:
create_single_cv_restraints	cfacv.tcl	/^proc create_single_cv_restraints { ncv restrList restrPARAMS } {$/;"	p
cv	cfacv.h	/^  cvStruct ** cv;$/;"	m	struct:DATASPACESTRUCT
cvStruct	cfacv.h	/^} cvStruct;$/;"	t	typeref:struct:CVSTRUCT
cv_getityp	cfacv.c	/^int cv_getityp ( char * typ ) {$/;"	f
cv_getstyp	cfacv.c	/^char * cv_getstyp ( int ityp ) {$/;"	f
cvc	cfacv.h	/^  double * cvc;          \/\/ the coefficient each collective variable$/;"	m	struct:RESTRSTRUCT
cvc_getcvi	cfacv.tcl	/^proc cvc_getcvi { cvc } {$/;"	p
dcast	cfacv_wrap.c	/^  swig_dycast_func        dcast;		\/* dynamic cast function down a hierarchy *\/$/;"	m	struct:swig_type_info	file:
delete_array	cfacv_wrap.c	/^  static void delete_array(double *ary) {$/;"	f	file:
delete_arrayint	cfacv_wrap.c	/^  static void delete_arrayint(int *ary) {$/;"	f	file:
destroy	cfacv_wrap.c	/^  int            destroy;$/;"	m	struct:swig_instance	file:
destructor	cfacv_wrap.c	/^  void              (*destructor)(void *);$/;"	m	struct:swig_class	file:
doAnalyticalCalc	cfacv.h	/^  int doAnalyticalCalc; \/\/ indicates whether or not we are to perform$/;"	m	struct:DATASPACESTRUCT
dr	chapeau.h	/^  double rmin, rmax, dr, idr;  \/\/ range and increment or argument of$/;"	m	struct:CHAPEAU
dt	cfacv.h	/^  double dt;           \/\/ timestep (ps)$/;"	m	struct:TAMDOPTSTRUCT
dvalue	cfacv_wrap.c	/^    double dvalue;$/;"	m	struct:swig_const_info	file:
energyFunc	cfacv.h	/^  restrEnergyFunc energyFunc;   \/\/ pointer to the restraining energy function$/;"	m	struct:RESTRSTRUCT
evolveAnalyticalParameters	cfacv.h	/^  int evolveAnalyticalParameters;$/;"	m	struct:DATASPACESTRUCT
f	cfacv.h	/^  double f;              \/\/ force on restraint$/;"	m	struct:RESTRSTRUCT
forceFunc	cfacv.h	/^  restrForceFunc forceFunc;     \/\/ pointer to the restraining force function$/;"	m	struct:RESTRSTRUCT
gamma	cfacv.h	/^  double gamma;        \/\/ fictitious friction (1\/ps)$/;"	m	struct:TAMDOPTSTRUCT
generate_cv	cfacv.tcl	/^proc generate_cv { cvOpt p } {$/;"	p
get	cfacv_wrap.c	/^  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);$/;"	m	struct:__anon2	file:
getArg	cfacv.tcl	/^proc getArg { argv key altkey def } {$/;"	p
get_double	cfacv_wrap.c	/^double get_double(double *a, int index) {$/;"	f
getmethod	cfacv_wrap.c	/^  swig_wrapper   getmethod;$/;"	m	struct:swig_attribute	file:
ginv	cfacv.h	/^  double ginv;         \/\/ inverse friction$/;"	m	struct:TAMDOPTSTRUCT
gr	cfacv.h	/^  double ** gr;  \/\/ cartesian gradients of this CV wrt contributing$/;"	m	struct:CVSTRUCT
gr	cfacv.h	/^  double ** gr;\/\/ array of intercenter pe gradients divided by r2$/;"	m	struct:DATASPACESTRUCT
hL	cfacv.h	/^  double hL[3]; \/\/ simulation box half-size$/;"	m	struct:DATASPACESTRUCT
half_domain	cfacv.h	/^  double half_domain;  \/\/ half-domain size of periodic CV$/;"	m	struct:TAMDOPTSTRUCT
half_domain	cfacv.h	/^  double half_domain;$/;"	m	struct:RESTRSTRUCT
handle_pair	cfacv.c	/^double handle_pair ( DataSpace * ds, int i, int j ) {$/;"	f
hashtable	cfacv_wrap.c	/^  Tcl_HashTable       hashtable;$/;"	m	struct:swig_class	file:
hits	chapeau.h	/^  int * hits;  \/\/ number of hits in each bin value of r$/;"	m	struct:CHAPEAU
iK	cfacv.h	/^  int iK;$/;"	m	struct:DATASPACESTRUCT
iM	cfacv.h	/^  int iM;$/;"	m	struct:DATASPACESTRUCT
iN	centers.h	/^  int iN;$/;"	m	struct:CENTERSTRUCT
iN	cfacv.h	/^  int iN;$/;"	m	struct:DATASPACESTRUCT
id	centers.h	/^  int id;$/;"	m	struct:CENTERSTRUCT
idr	chapeau.h	/^  double rmin, rmax, dr, idr;  \/\/ range and increment or argument of$/;"	m	struct:CHAPEAU
increment	cfacv.h	/^  double increment;    \/\/ increment of steered variable per timestep$/;"	m	struct:SMDOPTSTRUCT
ind	centers.h	/^  int * ind;$/;"	m	struct:ATOMCENTERSTRUCT
ind	cfacv.h	/^  int * ind;     \/\/ indices in the atom\/atom-group array generated by$/;"	m	struct:CVSTRUCT
initialize_base_template	cfacv.tcl	/^proc initialize_base_template { pdb } {$/;"	p
initval	cfacv.h	/^  double initval;      \/\/ initial value of steered variable$/;"	m	struct:SMDOPTSTRUCT
intArrayToList	cfacv.tcl	/^proc intArrayToList {a n} {$/;"	p
intListToArray	cfacv.tcl	/^proc intListToArray {l} {$/;"	p
intListToArray_Data	cfacv.tcl	/^proc intListToArray_Data {a l} {$/;"	p
invinterval	cfacv.h	/^  double invinterval;  \/\/ 1\/(t1-t0)$/;"	m	struct:SMDOPTSTRUCT
k	cfacv.h	/^  double k;               \/\/ spring constant$/;"	m	struct:RESTRSTRUCT
kT	cfacv.h	/^  double kT;           \/\/ fictitious thermal energy (kcal\/mol)$/;"	m	struct:TAMDOPTSTRUCT
lam	chapeau.h	/^  gsl_vector * lam;    \/\/ vector of coefficients -- these are what OTFP optimizes!$/;"	m	struct:CHAPEAU
lambar	chapeau.h	/^  gsl_vector * lambar; \/\/ $/;"	m	struct:CHAPEAU
lamdt	cfacv.h	/^  double lamdt;$/;"	m	struct:DATASPACESTRUCT
lamfric	cfacv.h	/^  double lamfric;$/;"	m	struct:DATASPACESTRUCT
left	centers.h	/^  pcenterStruct left; \/* only used in residue blocking *\/$/;"	m	struct:CENTERSTRUCT
left	chapeau.c	/^double left ( chapeau * ch, int m, double z, double zmin ) {$/;"	f
lvalue	cfacv_wrap.c	/^    long lvalue;$/;"	m	struct:swig_const_info	file:
m	centers.h	/^  double * m;$/;"	m	struct:ATOMCENTERSTRUCT
m	chapeau.h	/^  int m; \/\/ number of peaks$/;"	m	struct:CHAPEAU
mList	centers.h	/^  int * mList;$/;"	m	struct:CENTERSTRUCT
main	catbinsp.c	/^int main ( int argc, char * argv[] ) {$/;"	f
mask	chapeau.h	/^  int * mask;  \/\/ [particle]$/;"	m	struct:CHAPEAU
max	cfacv.h	/^  double max;$/;"	m	struct:RESTRSTRUCT
maxN	centers.h	/^  int maxN;$/;"	m	struct:CENTERSTRUCT
method	cfacv_wrap.c	/^  swig_wrapper   method;$/;"	m	struct:swig_method	file:
methods	cfacv_wrap.c	/^  swig_method        *methods;$/;"	m	struct:swig_class	file:
min	cfacv.h	/^  double min;             \/\/ min, max, half_domain for periodic boundaries$/;"	m	struct:RESTRSTRUCT
module	cfacv_wrap.c	/^  swig_module_info   *module;$/;"	m	struct:swig_class	file:
mt	cfacv.h	/^  double ** mt; \/\/ metric tensor$/;"	m	struct:DATASPACESTRUCT
my_binfopen	cfacv.c	/^FILE * my_binfopen ( char * name, char * code, unsigned int outputLevel, DataSpace * ds ) {$/;"	f
my_fopen	cfacv.c	/^FILE * my_fopen ( char * name, char * code ) {$/;"	f
my_getangle	measurements.c	/^double my_getangle ( double p0[3], double p1[3], double p2[3], double g0[3], double g1[3], double g2[3] ) {$/;"	f
my_getbond	measurements.c	/^double my_getbond ( double p0[3], double p1[3], double g0[3], double g1[3] ) {$/;"	f
my_getcellsize	cfacv.tcl	/^proc my_getcellsize { XSCFILE } {$/;"	p
my_getdihed	measurements.c	/^double my_getdihed ( double p1[3], double p2[3], double p3[3], double p4[3],$/;"	f
my_getorigin	cfacv.tcl	/^proc my_getorigin { XSCFILE } {$/;"	p
my_whitenoise	measurements.c	/^double my_whitenoise ( unsigned short xsubi[3]  ) {$/;"	f
mycopy	measurements.c	/^int mycopy ( double a[3], double b[3] ) {$/;"	f
mycross	measurements.c	/^int mycross ( double c[3], double a[3], double b[3] ) {$/;"	f
myddot	measurements.c	/^int myddot ( double A[][3], double a[3] ) {$/;"	f
mydiff	measurements.c	/^int mydiff ( double c[3], double a[3], double b[3] ) {$/;"	f
mydot	measurements.c	/^double mydot ( double a[3], double b[3] ) {$/;"	f
mymatvec	measurements.c	/^int mymatvec ( double z[3], double A[][3], double a[3] ) {$/;"	f
mynorm	measurements.c	/^double mynorm ( double a[3] ) {$/;"	f
myscale	measurements.c	/^int myscale ( double x, double a[3] ) {$/;"	f
mysum	measurements.c	/^int mysum ( double c[3], double a[3], double b[3] ) {$/;"	f
mytdot	measurements.c	/^int mytdot ( double A[][3], double a[3], double b[3] ) {$/;"	f
n	centers.h	/^  int n;$/;"	m	struct:ATOMCENTERSTRUCT
nC	cfacv.h	/^  int nC;        \/\/ count of atoms or atom-groups that contribute to this CV$/;"	m	struct:CVSTRUCT
nCV	cfacv.h	/^  int nCV;               \/\/ number of collective variables in SYSTEM$/;"	m	struct:RESTRSTRUCT
name	cfacv_wrap.c	/^    char *name;$/;"	m	struct:swig_const_info	file:
name	cfacv_wrap.c	/^  const char             *name;			\/* mangled name of this type *\/$/;"	m	struct:swig_type_info	file:
name	cfacv_wrap.c	/^  const char         *name;$/;"	m	struct:swig_class	file:
name	cfacv_wrap.c	/^  const char     *name;$/;"	m	struct:swig_attribute	file:
name	cfacv_wrap.c	/^  const char     *name;$/;"	m	struct:swig_method	file:
name	cfacv_wrap.c	/^  const char *name;$/;"	m	struct:__anon1	file:
name	cfacv_wrap.c	/^  const char *name;$/;"	m	struct:__anon2	file:
new_array	cfacv_wrap.c	/^  static double *new_array(size_t nelements) { $/;"	f	file:
new_arrayint	cfacv_wrap.c	/^  static int *new_arrayint(size_t nelements) { $/;"	f	file:
newlam	chapeau.h	/^  gsl_vector * newlam; \/\/$/;"	m	struct:CHAPEAU
next	cfacv_wrap.c	/^  struct swig_cast_info  *next;			\/* pointer to next cast in linked list *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info::swig_cast_info	file:
next	cfacv_wrap.c	/^  struct swig_module_info *next;		\/* Pointer to next element in circularly linked list *\/$/;"	m	struct:swig_module_info	typeref:struct:swig_module_info::swig_module_info	file:
nl	cfacv.h	/^  int ** nl;$/;"	m	struct:DATASPACESTRUCT
nlDispThresh	cfacv.h	/^  double nlDispThresh;$/;"	m	struct:DATASPACESTRUCT
nlTrig	cfacv.h	/^  int nlTrig;$/;"	m	struct:DATASPACESTRUCT
nl_squaredPairCutoff	cfacv.h	/^  double nl_squaredPairCutoff;$/;"	m	struct:DATASPACESTRUCT
nlc	cfacv.h	/^  int * nlc;$/;"	m	struct:DATASPACESTRUCT
noise	cfacv.h	/^  double noise;        \/\/ noise$/;"	m	struct:TAMDOPTSTRUCT
nsamples	cfacv.h	/^  int nsamples;$/;"	m	struct:DATASPACESTRUCT
obj	cfacv_wrap.c	/^SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {$/;"	v
ofp	chapeau.h	/^  FILE * ofp;$/;"	m	struct:CHAPEAU
outputFreq	chapeau.h	/^  int outputFreq;$/;"	m	struct:CHAPEAU
outputLevel	chapeau.h	/^  int outputLevel;$/;"	m	struct:CHAPEAU
output_cv	cfacv.tcl	/^proc output_cv { cvList fileName } {$/;"	p
owndata	cfacv_wrap.c	/^  int                    owndata;		\/* flag if the structure owns the clientdata *\/$/;"	m	struct:swig_type_info	file:
pcenterStruct	centers.h	/^typedef struct CENTERSTRUCT * pcenterStruct;$/;"	t	typeref:struct:CENTERSTRUCT
periodic	cfacv.h	/^  int periodic;        \/\/ flag indicating whether restraint is$/;"	m	struct:TAMDOPTSTRUCT
prev	cfacv_wrap.c	/^  struct swig_cast_info  *prev;			\/* pointer to the previous cast *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info::swig_cast_info	file:
pt	measurements.c	/^void pt ( double * angles, double * hx, double * hy, double * hz, double * ox, double * oy, double * oz, int n) {$/;"	f
ptr	cfacv_wrap.c	/^SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {$/;"	v
ptype	cfacv_wrap.c	/^    swig_type_info **ptype;$/;"	m	struct:swig_const_info	file:
pvalue	cfacv_wrap.c	/^    void   *pvalue;$/;"	m	struct:swig_const_info	file:
re_Harmonic	cfacv.c	/^double re_Harmonic ( double k, double v, double z, double half_domain ) {$/;"	f
re_HarmonicCartPBC	cfacv.c	/^double re_HarmonicCartPBC ( double k, double v, double z, double half_domain ) {$/;"	f
re_Periodic	cfacv.c	/^double re_Periodic ( double k, double v, double z, double half_domain ) {$/;"	f
read_centersPDB	cfacv.tcl	/^proc read_centersPDB { templatePdb serArr mass mk pk} {$/;"	p
read_centersVMD	cfacv.tcl	/^proc read_centersVMD { pL mL fileName molID } {$/;"	p
read_centers_residLists	cfacv.tcl	/^proc read_centers_residLists { ridL fileName } {$/;"	p
read_cvs	cfacv.tcl	/^proc read_cvs { cv_file cv_list nMon } {$/;"	p
read_restraints	cfacv.tcl	/^proc read_restraints { restr_file ncv restrList } {$/;"	p
reportParamFreq	cfacv.h	/^  int reportParamFreq;$/;"	m	struct:DATASPACESTRUCT
report_centers	cfacv.tcl	/^proc report_centers { p fileName } {$/;"	p
restr	cfacv.h	/^  restrStruct ** restr;$/;"	m	struct:DATASPACESTRUCT
restrEnergyFunc	cfacv.h	/^typedef double (*restrEnergyFunc) ( double, double, double, double );$/;"	t
restrForceFunc	cfacv.h	/^typedef double (*restrForceFunc) ( double, double, double, double );$/;"	t
restrStruct	cfacv.h	/^} restrStruct;$/;"	t	typeref:struct:RESTRSTRUCT
restr_getcvc	cfacv.tcl	/^proc restr_getcvc { r } {$/;"	p
restr_getopt	cfacv.tcl	/^proc restr_getopt { r key altkey def } {$/;"	p
restr_getoptlist	cfacv.tcl	/^proc restr_getoptlist { r } {$/;"	p
rf_Harmonic	cfacv.c	/^double rf_Harmonic ( double k, double v, double z, double half_domain ) {$/;"	f
rf_HarmonicCartPBC	cfacv.c	/^double rf_HarmonicCartPBC ( double k, double v, double z, double half_domain ) {$/;"	f
rf_Periodic	cfacv.c	/^double rf_Periodic ( double k, double v, double z, double half_domain ) {$/;"	f
rf_getityp	cfacv.c	/^int rf_getityp ( char * typ ) {$/;"	f
rf_getstyp	cfacv.c	/^char * rf_getstyp ( int ityp ) {$/;"	f
rfityp	cfacv.h	/^  int rfityp;                   \/\/ type of the restraining function$/;"	m	struct:RESTRSTRUCT
rg	centers.h	/^  double rg;$/;"	m	struct:CENTERSTRUCT
rgyr_sort	centers.c	/^int rgyr_sort (centerStruct * c, int * bin, double * x, double * y, double * z, int nAtom, int minAtom, double * rg, unsigned int Seed  ) {$/;"	f
right	centers.h	/^  pcenterStruct right;$/;"	m	struct:CENTERSTRUCT
right	chapeau.c	/^double right ( chapeau * ch, int m, double z, double zmin ) {$/;"	f
rmax	chapeau.h	/^  double rmin, rmax, dr, idr;  \/\/ range and increment or argument of$/;"	m	struct:CHAPEAU
rmin	chapeau.h	/^  double rmin, rmax, dr, idr;  \/\/ range and increment or argument of$/;"	m	struct:CHAPEAU
rr	cfacv.h	/^  double ** rr;\/\/ array of intercenter squared distances$/;"	m	struct:DATASPACESTRUCT
s	chapeau.h	/^  double *** s;  \/\/ [particle][dimension][peak]$/;"	m	struct:CHAPEAU
set	cfacv_wrap.c	/^  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);$/;"	m	struct:__anon2	file:
setmethod	cfacv_wrap.c	/^  swig_wrapper   setmethod;$/;"	m	struct:swig_attribute	file:
size	cfacv_wrap.c	/^  size_t                 size;		        \/* Number of types in this module *\/$/;"	m	struct:swig_module_info	file:
smdOpt	cfacv.h	/^  smdOptStruct * smdOpt;   \/\/ pointer to the smd options structure$/;"	m	struct:RESTRSTRUCT
smdOptInit	cfacv.c	/^int smdOptInit ( smdOptStruct * smd, double initval, int periodic ) {$/;"	f
smdOptStruct	cfacv.h	/^} smdOptStruct;$/;"	t	typeref:struct:SMDOPTSTRUCT
smdUpdate	cfacv.c	/^double smdUpdate ( double z, double increment, int OK ) {$/;"	f
smdUpdateFunc	cfacv.h	/^typedef double (*smdUpdateFunc) (double, double, int );$/;"	t
smdUpdate_Periodic	cfacv.c	/^double smdUpdate_Periodic ( double z, double increment, int OK ) {$/;"	f
squaredPairCutoff	cfacv.h	/^  double squaredPairCutoff;$/;"	m	struct:DATASPACESTRUCT
str	cfacv_wrap.c	/^  const char             *str;			\/* human readable name of this type *\/$/;"	m	struct:swig_type_info	file:
swig_attribute	cfacv_wrap.c	/^typedef struct swig_attribute {$/;"	s	file:
swig_attribute	cfacv_wrap.c	/^} swig_attribute;$/;"	t	typeref:struct:swig_attribute	file:
swig_cast_info	cfacv_wrap.c	/^typedef struct swig_cast_info {$/;"	s	file:
swig_cast_info	cfacv_wrap.c	/^} swig_cast_info;$/;"	t	typeref:struct:swig_cast_info	file:
swig_cast_initial	cfacv_wrap.c	/^static swig_cast_info *swig_cast_initial[] = {$/;"	v	file:
swig_class	cfacv_wrap.c	/^typedef struct swig_class {$/;"	s	file:
swig_class	cfacv_wrap.c	/^} swig_class;$/;"	t	typeref:struct:swig_class	file:
swig_command_info	cfacv_wrap.c	/^} swig_command_info;$/;"	t	typeref:struct:__anon1	file:
swig_commands	cfacv_wrap.c	/^static swig_command_info swig_commands[] = {$/;"	v	file:
swig_const_info	cfacv_wrap.c	/^typedef struct swig_const_info {$/;"	s	file:
swig_const_info	cfacv_wrap.c	/^} swig_const_info;$/;"	t	typeref:struct:swig_const_info	file:
swig_constants	cfacv_wrap.c	/^static swig_const_info swig_constants[] = {$/;"	v	file:
swig_converter_func	cfacv_wrap.c	/^typedef void *(*swig_converter_func)(void *, int *);$/;"	t	file:
swig_delete_func	cfacv_wrap.c	/^typedef void  (*swig_delete_func)(ClientData);$/;"	t	file:
swig_dycast_func	cfacv_wrap.c	/^typedef struct swig_type_info *(*swig_dycast_func)(void **);$/;"	t	typeref:struct:swig_dycast_func	file:
swig_instance	cfacv_wrap.c	/^typedef struct swig_instance {$/;"	s	file:
swig_instance	cfacv_wrap.c	/^} swig_instance;$/;"	t	typeref:struct:swig_instance	file:
swig_method	cfacv_wrap.c	/^typedef struct swig_method {$/;"	s	file:
swig_method	cfacv_wrap.c	/^} swig_method;$/;"	t	typeref:struct:swig_method	file:
swig_module	cfacv_wrap.c	/^static swig_module_info swig_module = {swig_types, 5, 0, 0, 0, 0};$/;"	v	file:
swig_module_info	cfacv_wrap.c	/^typedef struct swig_module_info {$/;"	s	file:
swig_module_info	cfacv_wrap.c	/^} swig_module_info;$/;"	t	typeref:struct:swig_module_info	file:
swig_type_info	cfacv_wrap.c	/^typedef struct swig_type_info {$/;"	s	file:
swig_type_info	cfacv_wrap.c	/^} swig_type_info;$/;"	t	typeref:struct:swig_type_info	file:
swig_type_initial	cfacv_wrap.c	/^static swig_type_info *swig_type_initial[] = {$/;"	v	file:
swig_types	cfacv_wrap.c	/^static swig_type_info *swig_types[6];$/;"	v	file:
swig_var_info	cfacv_wrap.c	/^} swig_var_info;$/;"	t	typeref:struct:__anon2	file:
swig_variable_func	cfacv_wrap.c	/^typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);$/;"	t	file:
swig_variables	cfacv_wrap.c	/^static swig_var_info swig_variables[] = {$/;"	v	file:
swig_wrapper	cfacv_wrap.c	/^typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);$/;"	t	file:
swig_wrapper_func	cfacv_wrap.c	/^typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);$/;"	t	file:
swigconstTable	cfacv_wrap.c	/^static Tcl_HashTable   swigconstTable;$/;"	v	file:
swigconstTableinit	cfacv_wrap.c	/^static int             swigconstTableinit = 0;$/;"	v	file:
sz	cfacv_wrap.c	/^SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {$/;"	v
t0	cfacv.h	/^  int t0;              \/\/ timestep to begin steering$/;"	m	struct:SMDOPTSTRUCT
t1	cfacv.h	/^  int t1;              \/\/ timestep to end steering (and hold restraint fixed)$/;"	m	struct:SMDOPTSTRUCT
tamdOpt	cfacv.h	/^  tamdOptStruct * tamdOpt; \/\/ pointer to the tamd options structure$/;"	m	struct:RESTRSTRUCT
tamdOptStruct	cfacv.h	/^} tamdOptStruct;$/;"	t	typeref:struct:TAMDOPTSTRUCT
tamdUpdate	cfacv.c	/^double tamdUpdate ( DataSpace * ds, double z, double f, tamdOptStruct * tamd, double * noise, double * res ) {$/;"	f
tamd_noise	cfacv.h	/^  double tamd_noise;$/;"	m	struct:RESTRSTRUCT
tamd_restraint	cfacv.h	/^  double tamd_restraint;$/;"	m	struct:RESTRSTRUCT
target	cfacv.h	/^  double target;       \/\/ target value of steered variable$/;"	m	struct:SMDOPTSTRUCT
thisptr	cfacv_wrap.c	/^  Tcl_Obj       *thisptr;$/;"	m	struct:swig_instance	file:
thisvalue	cfacv_wrap.c	/^  void          *thisvalue;$/;"	m	struct:swig_instance	file:
typ	cfacv.h	/^  int typ;       \/\/ collective variable type$/;"	m	struct:CVSTRUCT
type	cfacv_wrap.c	/^    int type;$/;"	m	struct:swig_const_info	file:
type	cfacv_wrap.c	/^  swig_type_info         *type;			\/* pointer to type that is equivalent to this type *\/$/;"	m	struct:swig_cast_info	file:
type	cfacv_wrap.c	/^  swig_type_info   **type;$/;"	m	struct:swig_class	file:
type_initial	cfacv_wrap.c	/^  swig_type_info         **type_initial;	\/* Array of initially generated type structures *\/$/;"	m	struct:swig_module_info	file:
types	cfacv_wrap.c	/^  swig_type_info         **types;		\/* Array of pointers to swig_type_info structures that are in this module *\/$/;"	m	struct:swig_module_info	file:
u	cfacv.h	/^  double u;              \/\/ potential energy stored by restraint$/;"	m	struct:RESTRSTRUCT
update	cfacv.h	/^  smdUpdateFunc update; \/\/ function used to update steered variable$/;"	m	struct:SMDOPTSTRUCT
updateinterval	chapeau.h	/^  int updateinterval;$/;"	m	struct:CHAPEAU
useTAMDforces	cfacv.h	/^  int useTAMDforces; \/\/ indicates whether tamd forces are used to$/;"	m	struct:DATASPACESTRUCT
val	cfacv.h	/^  double val;             \/\/ restraint value$/;"	m	struct:RESTRSTRUCT
val	cfacv.h	/^  double val;    \/\/ value of the CV$/;"	m	struct:CVSTRUCT
within_range	cfacv.tcl	/^proc within_range {selList selB r} {$/;"	p
wrapper	cfacv_wrap.c	/^  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);$/;"	m	struct:__anon1	file:
z	cfacv.h	/^  double z;               \/\/ target value$/;"	m	struct:RESTRSTRUCT
